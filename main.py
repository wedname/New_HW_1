"""
ЗАДАНИЯ НА ИСПОЛЬЗОВАНИЕ МЕТОДА MAP()

Задание 1:
Дан список из строк, в каждой строке содержится по предложению
для дальнейшей обработки текста необходимо в каждой строке
убрать символы пунктуации и разделить слова по пробелам.
Показать результат обработки.
Для получения символов пунктуации можно воспользоваться следующим
кодом:
import string
print(string.punctuation)

Задание 2:
Дана последовательность дат рождения пользователей записанная в строках:
['1/5/2012', '14/10/1973', '6/10/1999', '7/5/2000', '6/9/1966', '24/12/2002', '3/3/1964', '30/9/1984', '29/5/1956',
'15/9/1952', '1/4/1960', '3/4/1992', '8/8/1968', '19/12/1994', '2/12/1982', '29/10/1991', '20/11/1991', '31/6/1979',
'10/1/2009', '1/2/2001']
Необходимо из этих дат определить количество полных лет пользователей,
записать их в новый список и отобразить.
"""

import string
import datetime

# ЗАДАНИЕ 1 ------------------------------------------------------------------------------------------------------------

some_text_1 = ["Python - высокоуровневый язык программирования общего назначения с динамической строгой типизацией и "
               "автоматическим управлением памятью, ориентированный на повышение производительности разработчика, "
               "читаемости кода и его качества, а также на обеспечение переносимости написанных на нём программ.",
               "Язык является полностью объектно-ориентированным — всё является объектами.",
               "Необычной особенностью языка является выделение блоков кода пробельными отступами.",
               "Синтаксис ядра языка минималистичен, за счёт чего на практике редко возникает необходимость обращаться "
               "к документации.",
               "Сам же язык известен как интерпретируемый и используется в том числе для написания скриптов.",
               "Недостатками языка являются зачастую более низкая скорость работы и более высокое потребление памяти "
               "написанных на нём программ по сравнению с аналогичным кодом, написанным на компилируемых языках, таких "
               "как Си или C++."]

some_text_2 = ["Это первое предложение!",
               "Это второе предложение с символами пунктуации ,!-_?."]


def delete_special_str(text: str):
    special_str = string.punctuation

    for x in text:
        if x in special_str:
            text = text.replace(x, "")
    return text


result_1 = list(map(lambda x: delete_special_str(x).split(), some_text_1))
result_2 = list(map(lambda x: delete_special_str(x).split(), some_text_2))
print(result_1)
print(result_2)


# ЗАДАНИЕ 2 ------------------------------------------------------------------------------------------------------------

birthdays = ['1/5/2012', '14/10/1973', '6/10/1999', '7/5/2000', '6/9/1966', '24/12/2002', '3/3/1964', '30/9/1984',
             '29/5/1956', '15/9/1952', '1/4/1960', '3/4/1992', '8/8/1968', '19/12/1994', '2/12/1982', '29/10/1991',
             '20/11/1991', '30/6/1979', '10/1/2009', '1/2/2001'
             ]


def calc_age(birthday: str):
    date_of_birth = datetime.datetime.strptime(birthday, "%d/%m/%Y").date()
    current_date = datetime.datetime.today().date()

    age = current_date.year - date_of_birth.year
    month_verification = current_date.month - date_of_birth.month
    date_verification = current_date.day - date_of_birth.day

    if month_verification < 0:
        age = age - 1
    elif date_verification < 0 and month_verification == 0:
        age = age - 1

    return str(age)


# Была ошибка в задании (17 элемент списка), в июне 30 дней, а не 31.

result_ages = list(map(lambda x: calc_age(x), birthdays))
print(birthdays)
print(result_ages)

"""
ЗАДАНИЯ НА ИСПОЛЬЗОВАНИЕ МЕТОДА FILTER()

Задание 1:
Дан словарь студентов с их оценками по каждому из предметов:
{'user1': {'math': 5, 'english': 12, 'geography': 7}, 'user2': {'math': 9, 'english': 3, 'geography': 11}, 'user3': 
{'math': 5, 'english': 8, 'geography': 6}, 'user4': {'math': 12, 'english': 10, 'geography': 10}, 'user5': 
{'math': 8, 'english': 5, 'geography': 5}, 'user6': {'math': 3, 'english': 7, 'geography': 1}, 'user7': 
{'math': 10, 'english': 9, 'geography': 9}, 'user8': {'math': 4, 'english': 2, 'geography': 1}, 'user9': 
{'math': 5, 'english': 2, 'geography': 6}, 'user10': {'math': 7, 'english': 9, 'geography': 9}, 'user11': 
{'math': 8, 'english': 12, 'geography': 12}, 'user12': {'math': 1, 'english': 6, 'geography': 5}, 'user13': 
{'math': 6, 'english': 12, 'geography': 11}, 'user14': {'math': 12, 'english': 5, 'geography': 6}, 'user15': 
{'math': 2, 'english': 1, 'geography': 6}}

Необходимо показать всех пользователей у которых оценка по математике
больше или равна 10, оценка по английскому выше средней по всем студентам,
и оценка по географии не меньше 7.

Задание 2:
Дана последовательность дат рождения пользователей записанная в строках:
['21/4/1977', '24/3/1980', '26/3/1963', '24/11/1952', '7/3/1991', '16/2/1974', '9/1/2002', '6/10/1964', '1/10/1999', 
'27/12/1989', '23/2/1958', '4/4/1991', '13/10/1970', '29/6/1992', '10/2/1974', '23/11/1987', '28/11/1973', '30/3/2001', 
'20/9/1961', '21/10/2000', '22/2/1956', '22/12/1973', '5/9/1983', '4/5/1962', '11/7/1982', '22/11/1958', '20/8/1954', 
'30/6/2010', '1/11/1982', '27/9/1991']
Необходимо отобразить всех пользователей, которые родились в промежуток дат
указанный пользователем. Начало и конец промежутка вводятся в формате
"день/месяц/год".
"""

# ЗАДАНИЕ 1 ------------------------------------------------------------------------------------------------------------

students = {
    'user1': {'math': 5, 'english': 12, 'geography': 7},
    'user2': {'math': 9, 'english': 3, 'geography': 11},
    'user3': {'math': 5, 'english': 8, 'geography': 6},
    'user4': {'math': 12, 'english': 10, 'geography': 10},
    'user5': {'math': 8, 'english': 5, 'geography': 5},
    'user6': {'math': 3, 'english': 7, 'geography': 1},
    'user7': {'math': 10, 'english': 9, 'geography': 9},
    'user8': {'math': 4, 'english': 2, 'geography': 1},
    'user9': {'math': 5, 'english': 2, 'geography': 6},
    'user10': {'math': 7, 'english': 9, 'geography': 9},
    'user11': {'math': 8, 'english': 12, 'geography': 12},
    'user12': {'math': 1, 'english': 6, 'geography': 5},
    'user13': {'math': 6, 'english': 12, 'geography': 11},
    'user14': {'math': 12, 'english': 5, 'geography': 6},
    'user15': {'math': 2, 'english': 1, 'geography': 6}
}


def avg(grades: list):
    sum_grades = 0
    for n in grades:
        sum_grades += n
    return sum_grades / len(grades)


math = filter(lambda x: students[x]["math"] >= 10, students)
print(f"Ученики, у которых оценка оценка по математике больше или равна 10: {list(math)}")

avg_grade = avg([students[x]['english'] for x in students])
avg_english = filter(lambda x: students[x]["english"] >= avg_grade, students)
print(f"Ученики, у которых оценка по английскому выше средней по всем студентам: {list(avg_english)}")

geography = filter(lambda x: students[x]["geography"] >= 7, students)
print(f"Ученики, у которых оценка по географии не меньше 7: {list(geography)}")

all_cond = filter(lambda x:
                  students[x]["math"] >= 10 and students[x]["geography"] >= 7 and students[x]["english"] >= avg_grade,
                  students
                  )
print(f"Ученики, которые проходят по всем условиям: {list(all_cond)}")


# ЗАДАНИЕ 2 ------------------------------------------------------------------------------------------------------------

date_of_birth_2 = ['21/4/1977', '24/3/1980', '26/3/1963', '24/11/1952', '7/3/1991', '16/2/1974', '9/1/2002',
                   '6/10/1964', '1/10/1999', '27/12/1989', '23/2/1958', '4/4/1991', '13/10/1970', '29/6/1992',
                   '10/2/1974', '23/11/1987', '28/11/1973', '30/3/2001', '20/9/1961', '21/10/2000', '22/2/1956',
                   '22/12/1973', '5/9/1983', '4/5/1962', '11/7/1982', '22/11/1958', '20/8/1954', '30/6/2010',
                   '1/11/1982', '27/9/1991'
                   ]

first_date = input("Введите начало промежутка дат (формат - день/месяц/год): ")
first_date = datetime.datetime.strptime(first_date, "%d/%m/%Y").date()

second_date = input("Введите конец промежутка дат (формат - день/месяц/год): ")
second_date = datetime.datetime.strptime(second_date, "%d/%m/%Y").date()

interval = filter(lambda x:
                  first_date <= datetime.datetime.strptime(x, "%d/%m/%Y").date() <= second_date,
                  date_of_birth_2)
print(list(interval))
